import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
let NgCastService = class NgCastService {
    constructor() {
        this.window = window;
        this.status = {
            casting: false
        };
        this.onInitSuccess = function () {
            console.log('GCast initialization success');
        };
        this.onError = function (err) {
            console.log('GCast initialization failed', err);
        };
        this.discoverDevices = () => {
            let self = this;
            let subj = new Subject();
            this.cast.requestSession((s) => {
                self.session = s;
                self.setCasting(true);
                subj.next('CONNECTED');
            }, function (err) {
                self.setCasting(false);
                if (err.code === 'cancel') {
                    self.session = undefined;
                    subj.next('CANCEL');
                }
                else {
                    console.error('Error selecting a cast device', err);
                }
            });
            return subj;
        };
        this.launchMedia = (media) => {
            let mediaInfo = new this.cast.media.MediaInfo(media);
            let request = new this.cast.media.LoadRequest(mediaInfo);
            console.log('launch media with session', this.session);
            if (!this.session) {
                window.open(media);
                return false;
            }
            this.session.loadMedia(request, this.onMediaDiscovered.bind(this, 'loadMedia'), this.onMediaError);
            return true;
        };
        this.onMediaDiscovered = (url, type) => {
            let media = new this.chrome.cast.media.MediaInfo(url, type);
            this.currentMedia = media;
        };
        this.play = () => {
            this.currentMedia.play(null);
        };
        this.pause = () => {
            this.currentMedia.pause(null);
        };
        this.stop = () => {
            this.currentMedia.stop(null);
        };
        this.onMediaError = (err) => {
            console.error('Error launching media', err);
        };
        this.window.__onGCastApiAvailable = (isAvailable) => {
            if (!isAvailable) {
                return false;
            }
            this.cast = this.window['chrome'].cast;
            this.chrome = this.window['chrome'];
            var castContext = this.cast.framework.CastContext.getInstance();
            castContext.setOptions({
                autoJoinPolicy: this.chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,
                receiverApplicationId: this.chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID
            });
            var stateChanged = this.cast.framework.CastContextEventType.CAST_STATE_CHANGED;
            castContext.addEventListener(stateChanged, () => {
                var castSession = castContext.getCurrentSession();
                var media = new this.chrome.cast.media.MediaInfo(this.currentMedia);
                var request = new this.chrome.cast.media.LoadRequest(media);
                castSession && castSession
                    .loadMedia(request)
                    .then(() => {
                    console.log('Success');
                })
                    .catch((error) => {
                    console.log('Error: ' + error);
                });
            });
        };
    }
    initializeCastApi() {
        this.cast = this.window['chrome'].cast;
        let sessionRequest = new this.cast.SessionRequest(this.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID);
        let apiConfig = new this.cast.ApiConfig(sessionRequest, () => { }, (status) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } });
        let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);
    }
    ;
    setCasting(value) {
        this.status.casting = value;
    }
    getStatus() {
        return this.status;
    }
};
NgCastService = tslib_1.__decorate([
    Injectable()
], NgCastService);
export { NgCastService };
//# sourceMappingURL=data:application/json;base64,