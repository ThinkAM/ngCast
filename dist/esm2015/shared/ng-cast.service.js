import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
let NgCastService = class NgCastService {
    constructor() {
        this.window = window;
        this.status = {
            casting: false
        };
        this.onInitSuccess = function () {
            console.log('GCast initialization success');
        };
        this.onError = function (err) {
            console.log('GCast initialization failed', err);
        };
        this.discoverDevices = () => {
            let self = this;
            let subj = new Subject();
            this.cast.requestSession((s) => {
                self.session = s;
                self.setCasting(true);
                subj.next('CONNECTED');
            }, function (err) {
                self.setCasting(false);
                if (err.code === 'cancel') {
                    self.session = undefined;
                    subj.next('CANCEL');
                }
                else {
                    console.error('Error selecting a cast device', err);
                }
            });
            return subj;
        };
        this.onMediaDiscovered = (categories) => {
            let script = window['document'].createElement('script');
            script.setAttribute('type', 'text/javascript');
            script.setAttribute('src', 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1');
            window['document'].body.appendChild(script);
            globalThis.CastPlayer.mediaJSON.categories = categories;
            return globalThis.CastPlayer.addMediaContents();
        };
        this.play = () => {
            this.currentMedia.play(null);
        };
        this.pause = () => {
            this.currentMedia.pause(null);
        };
        this.stop = () => {
            this.currentMedia.stop(null);
        };
        this.onMediaError = (err) => {
            console.error('Error launching media', err);
        };
        globalThis.CastPlayer.mediaJSON = {
            categories: []
        };
    }
    initializeCastApi() {
        this.cast = this.window['chrome'].cast;
        let sessionRequest = new this.cast.SessionRequest('4F8B3483');
        let apiConfig = new this.cast.ApiConfig(sessionRequest, () => { }, (status) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } });
        let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);
    }
    ;
    initialize(mediaContents) {
        if (mediaContents) {
            globalThis.CastPlayer.initializeUI();
            globalThis.CastPlayer.setupLocalPlayer();
            globalThis.CastPlayer.initializeCastPlayer();
        }
    }
    setCasting(value) {
        this.status.casting = value;
        globalThis.CastPlayer.setupRemotePlayer();
    }
    getStatus() {
        return this.status;
    }
};
NgCastService = tslib_1.__decorate([
    Injectable()
], NgCastService);
export { NgCastService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2FzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RoaW5rZXIvZGV2L3RoaW5rYW0vbmdDYXN0LyIsInNvdXJjZXMiOlsic2hhcmVkL25nLWNhc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTy9CLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFTeEI7UUFOUSxXQUFNLEdBQVEsTUFBTSxDQUFDO1FBRXRCLFdBQU0sR0FBRztZQUNkLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQWtCRixrQkFBYSxHQUFHO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUVGLFlBQU8sR0FBRyxVQUFVLEdBQVE7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUM7UUFFRixvQkFBZSxHQUFHLEdBQUcsRUFBRTtZQUNyQixJQUFJLElBQUksR0FBUSxJQUFJLENBQUM7WUFDckIsSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QixDQUFDLEVBQUUsVUFBVSxHQUFRO2dCQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO29C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QUFVLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDcEIsQ0FBQztDQUNGLENBQUE7QUEvRlksYUFBYTtJQUR6QixVQUFVLEVBQUU7R0FDQSxhQUFhLENBK0Z6QjtTQS9GWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgdmFyIENhc3RQbGF5ZXI6IGFueTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nQ2FzdFNlcnZpY2Uge1xuICBwcml2YXRlIGNhc3Q6IGFueTtcbiAgcHJpdmF0ZSBjdXJyZW50TWVkaWE6IGFueTtcbiAgcHJpdmF0ZSB3aW5kb3c6IGFueSA9IHdpbmRvdztcblxuICBwdWJsaWMgc3RhdHVzID0ge1xuICAgIGNhc3Rpbmc6IGZhbHNlXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgZ2xvYmFsVGhpcy5DYXN0UGxheWVyLm1lZGlhSlNPTiA9IHtcbiAgICAgIGNhdGVnb3JpZXM6IFtdXG4gICAgfTtcbiAgfVxuXG4gIGluaXRpYWxpemVDYXN0QXBpKCkge1xuICAgIHRoaXMuY2FzdCA9IHRoaXMud2luZG93WydjaHJvbWUnXS5jYXN0O1xuICAgIGxldCBzZXNzaW9uUmVxdWVzdCA9IG5ldyB0aGlzLmNhc3QuU2Vzc2lvblJlcXVlc3QoJzRGOEIzNDgzJyk7XG4gICAgbGV0IGFwaUNvbmZpZyA9IG5ldyB0aGlzLmNhc3QuQXBpQ29uZmlnKHNlc3Npb25SZXF1ZXN0LFxuICAgICAgKCkgPT4geyB9LFxuICAgICAgKHN0YXR1czogYW55KSA9PiB7IGlmIChzdGF0dXMgPT09IHRoaXMuY2FzdC5SZWNlaXZlckF2YWlsYWJpbGl0eS5BVkFJTEFCTEUpIHsgfSB9XG4gICAgKTtcbiAgICBsZXQgeCA9IHRoaXMuY2FzdC5pbml0aWFsaXplKGFwaUNvbmZpZywgdGhpcy5vbkluaXRTdWNjZXNzLCB0aGlzLm9uRXJyb3IpO1xuICB9O1xuXG4gIG9uSW5pdFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coJ0dDYXN0IGluaXRpYWxpemF0aW9uIHN1Y2Nlc3MnKTtcbiAgfTtcblxuICBvbkVycm9yID0gZnVuY3Rpb24gKGVycjogYW55KSB7XG4gICAgY29uc29sZS5sb2coJ0dDYXN0IGluaXRpYWxpemF0aW9uIGZhaWxlZCcsIGVycik7XG4gIH07XG5cbiAgZGlzY292ZXJEZXZpY2VzID0gKCkgPT4ge1xuICAgIGxldCBzZWxmOiBhbnkgPSB0aGlzO1xuICAgIGxldCBzdWJqID0gbmV3IFN1YmplY3QoKTtcbiAgICB0aGlzLmNhc3QucmVxdWVzdFNlc3Npb24oKHM6IGFueSkgPT4ge1xuICAgICAgc2VsZi5zZXNzaW9uID0gcztcbiAgICAgIHNlbGYuc2V0Q2FzdGluZyh0cnVlKTtcbiAgICAgIHN1YmoubmV4dCgnQ09OTkVDVEVEJyk7XG4gICAgfSwgZnVuY3Rpb24gKGVycjogYW55KSB7XG4gICAgICBzZWxmLnNldENhc3RpbmcoZmFsc2UpO1xuICAgICAgaWYgKGVyci5jb2RlID09PSAnY2FuY2VsJykge1xuICAgICAgICBzZWxmLnNlc3Npb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHN1YmoubmV4dCgnQ0FOQ0VMJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWxlY3RpbmcgYSBjYXN0IGRldmljZScsIGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN1Ymo7XG4gIH07XG5cbiAgb25NZWRpYURpc2NvdmVyZWQgPSAoY2F0ZWdvcmllczogYW55W10pID0+IHtcbiAgICBsZXQgc2NyaXB0ID0gd2luZG93Wydkb2N1bWVudCddLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9qYXZhc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2N2L2pzL3NlbmRlci92MS9jYXN0X3NlbmRlci5qcz9sb2FkQ2FzdEZyYW1ld29yaz0xJyk7XG4gICAgd2luZG93Wydkb2N1bWVudCddLmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblxuICAgIGdsb2JhbFRoaXMuQ2FzdFBsYXllci5tZWRpYUpTT04uY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG5cbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5DYXN0UGxheWVyLmFkZE1lZGlhQ29udGVudHMoKTtcbiAgfTtcblxuICBpbml0aWFsaXplKG1lZGlhQ29udGVudHM6IGFueSk6IHZvaWQge1xuICAgIGlmIChtZWRpYUNvbnRlbnRzKSB7XG4gICAgICBnbG9iYWxUaGlzLkNhc3RQbGF5ZXIuaW5pdGlhbGl6ZVVJKCk7XG4gICAgICBnbG9iYWxUaGlzLkNhc3RQbGF5ZXIuc2V0dXBMb2NhbFBsYXllcigpO1xuICAgICAgZ2xvYmFsVGhpcy5DYXN0UGxheWVyLmluaXRpYWxpemVDYXN0UGxheWVyKCk7XG4gICAgfVxuICB9XG5cbiAgcGxheSA9ICgpID0+IHtcbiAgICB0aGlzLmN1cnJlbnRNZWRpYS5wbGF5KG51bGwpO1xuICB9O1xuXG4gIHBhdXNlID0gKCkgPT4ge1xuICAgIHRoaXMuY3VycmVudE1lZGlhLnBhdXNlKG51bGwpO1xuICB9O1xuXG4gIHN0b3AgPSAoKSA9PiB7XG4gICAgdGhpcy5jdXJyZW50TWVkaWEuc3RvcChudWxsKTtcbiAgfTtcblxuICBvbk1lZGlhRXJyb3IgPSAoZXJyOiBhbnkpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsYXVuY2hpbmcgbWVkaWEnLCBlcnIpO1xuICB9O1xuXG4gIHNldENhc3RpbmcodmFsdWU6IGFueSkge1xuICAgIHRoaXMuc3RhdHVzLmNhc3RpbmcgPSB2YWx1ZTtcbiAgICBnbG9iYWxUaGlzLkNhc3RQbGF5ZXIuc2V0dXBSZW1vdGVQbGF5ZXIoKTtcbiAgfVxuXG4gIGdldFN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0dXNcbiAgfVxufVxuIl19