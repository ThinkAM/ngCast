import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
let NgCastService = class NgCastService {
    constructor() {
        this.window = window;
        this.status = {
            casting: false
        };
        this.onInitSuccess = function () {
            console.log('GCast initialization success');
        };
        this.onError = function (err) {
            console.log('GCast initialization failed', err);
        };
        this.discoverDevices = () => {
            let self = this;
            let subj = new Subject();
            this.cast.requestSession((s) => {
                self.session = s;
                self.setCasting(true);
                subj.next('CONNECTED');
            }, function (err) {
                self.setCasting(false);
                if (err.code === 'cancel') {
                    self.session = undefined;
                    subj.next('CANCEL');
                }
                else {
                    console.error('Error selecting a cast device', err);
                }
            });
            return subj;
        };
        this.onMediaDiscovered = (categories) => {
            let script = window['document'].createElement('script');
            script.setAttribute('type', 'text/javascript');
            script.setAttribute('src', 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1');
            window['document'].body.appendChild(script);
            globalThis.CastPlayer.mediaJSON.categories = categories;
            return globalThis.CastPlayer.addMediaContents();
        };
        this.play = () => {
            this.currentMedia.play(null);
        };
        this.pause = () => {
            this.currentMedia.pause(null);
        };
        this.stop = () => {
            this.currentMedia.stop(null);
        };
        this.onMediaError = (err) => {
            console.error('Error launching media', err);
        };
        globalThis.CastPlayer.mediaJSON = {
            categories: []
        };
    }
    initializeCastApi() {
        this.cast = this.window['chrome'].cast;
        let sessionRequest = new this.cast.SessionRequest('4F8B3483');
        let apiConfig = new this.cast.ApiConfig(sessionRequest, () => { }, (status) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } });
        let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);
    }
    ;
    initialize(mediaContents) {
        if (mediaContents) {
            globalThis.CastPlayer.initializeUI();
            globalThis.CastPlayer.setupLocalPlayer();
            this.window['__onGCastApiAvailable'] = (isAvailable) => {
                if (isAvailable) {
                    globalThis.CastPlayer.initializeCastPlayer();
                }
            };
        }
    }
    setCasting(value) {
        this.status.casting = value;
    }
    getStatus() {
        return this.status;
    }
};
NgCastService = tslib_1.__decorate([
    Injectable()
], NgCastService);
export { NgCastService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2FzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RoaW5rZXIvZGV2L3RoaW5rYW0vbmdDYXN0LyIsInNvdXJjZXMiOlsic2hhcmVkL25nLWNhc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTy9CLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFTeEI7UUFOUSxXQUFNLEdBQVEsTUFBTSxDQUFDO1FBRXRCLFdBQU0sR0FBRztZQUNkLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQWtCRixrQkFBYSxHQUFHO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUVGLFlBQU8sR0FBRyxVQUFVLEdBQVE7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUM7UUFFRixvQkFBZSxHQUFHLEdBQUcsRUFBRTtZQUNyQixJQUFJLElBQUksR0FBUSxJQUFJLENBQUM7WUFDckIsSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QixDQUFDLEVBQUUsVUFBVSxHQUFRO2dCQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztvQkFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDckI7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDckQ7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBRUYsc0JBQWlCLEdBQUcsQ0FBQyxVQUFpQixFQUFFLEVBQUU7WUFDeEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLDRFQUE0RSxDQUFDLENBQUM7WUFDekcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFNUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUV4RCxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNsRCxDQUFDLENBQUM7UUFjRixTQUFJLEdBQUcsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO1FBRUYsVUFBSyxHQUFHLEdBQUcsRUFBRTtZQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztRQUVGLFNBQUksR0FBRyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUM7UUFFRixpQkFBWSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUM7UUEvRUEsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUc7WUFDaEMsVUFBVSxFQUFFLEVBQUU7U0FDZixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDdkMsSUFBSSxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RCxJQUFJLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFDcEQsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUNULENBQUMsTUFBVyxFQUFFLEVBQUUsR0FBRyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUNsRixDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFBQSxDQUFDO0lBd0NGLFVBQVUsQ0FBQyxhQUFrQjtRQUMzQixJQUFJLGFBQWEsRUFBRTtZQUNqQixVQUFVLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3JDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxXQUFvQixFQUFFLEVBQUU7Z0JBQzlELElBQUksV0FBVyxFQUFFO29CQUNmLFVBQVUsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztpQkFDOUM7WUFDSCxDQUFDLENBQUM7U0FDSDtJQUNILENBQUM7SUFrQkQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3BCLENBQUM7Q0FDRixDQUFBO0FBbEdZLGFBQWE7SUFEekIsVUFBVSxFQUFFO0dBQ0EsYUFBYSxDQWtHekI7U0FsR1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBDYXN0UGxheWVyOiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ0Nhc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjYXN0OiBhbnk7XG4gIHByaXZhdGUgY3VycmVudE1lZGlhOiBhbnk7XG4gIHByaXZhdGUgd2luZG93OiBhbnkgPSB3aW5kb3c7XG5cbiAgcHVibGljIHN0YXR1cyA9IHtcbiAgICBjYXN0aW5nOiBmYWxzZVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGdsb2JhbFRoaXMuQ2FzdFBsYXllci5tZWRpYUpTT04gPSB7XG4gICAgICBjYXRlZ29yaWVzOiBbXVxuICAgIH07XG4gIH1cblxuICBpbml0aWFsaXplQ2FzdEFwaSgpIHtcbiAgICB0aGlzLmNhc3QgPSB0aGlzLndpbmRvd1snY2hyb21lJ10uY2FzdDtcbiAgICBsZXQgc2Vzc2lvblJlcXVlc3QgPSBuZXcgdGhpcy5jYXN0LlNlc3Npb25SZXF1ZXN0KCc0RjhCMzQ4MycpO1xuICAgIGxldCBhcGlDb25maWcgPSBuZXcgdGhpcy5jYXN0LkFwaUNvbmZpZyhzZXNzaW9uUmVxdWVzdCxcbiAgICAgICgpID0+IHsgfSxcbiAgICAgIChzdGF0dXM6IGFueSkgPT4geyBpZiAoc3RhdHVzID09PSB0aGlzLmNhc3QuUmVjZWl2ZXJBdmFpbGFiaWxpdHkuQVZBSUxBQkxFKSB7IH0gfVxuICAgICk7XG4gICAgbGV0IHggPSB0aGlzLmNhc3QuaW5pdGlhbGl6ZShhcGlDb25maWcsIHRoaXMub25Jbml0U3VjY2VzcywgdGhpcy5vbkVycm9yKTtcbiAgfTtcblxuICBvbkluaXRTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnNvbGUubG9nKCdHQ2FzdCBpbml0aWFsaXphdGlvbiBzdWNjZXNzJyk7XG4gIH07XG5cbiAgb25FcnJvciA9IGZ1bmN0aW9uIChlcnI6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKCdHQ2FzdCBpbml0aWFsaXphdGlvbiBmYWlsZWQnLCBlcnIpO1xuICB9O1xuXG4gIGRpc2NvdmVyRGV2aWNlcyA9ICgpID0+IHtcbiAgICBsZXQgc2VsZjogYW55ID0gdGhpcztcbiAgICBsZXQgc3ViaiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgdGhpcy5jYXN0LnJlcXVlc3RTZXNzaW9uKChzOiBhbnkpID0+IHtcbiAgICAgIHNlbGYuc2Vzc2lvbiA9IHM7XG4gICAgICBzZWxmLnNldENhc3RpbmcodHJ1ZSk7XG4gICAgICBzdWJqLm5leHQoJ0NPTk5FQ1RFRCcpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnI6IGFueSkge1xuICAgICAgc2VsZi5zZXRDYXN0aW5nKGZhbHNlKTtcbiAgICAgIGlmIChlcnIuY29kZSA9PT0gJ2NhbmNlbCcpIHtcbiAgICAgICAgc2VsZi5zZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICBzdWJqLm5leHQoJ0NBTkNFTCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VsZWN0aW5nIGEgY2FzdCBkZXZpY2UnLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdWJqO1xuICB9O1xuXG4gIG9uTWVkaWFEaXNjb3ZlcmVkID0gKGNhdGVnb3JpZXM6IGFueVtdKSA9PiB7XG4gICAgbGV0IHNjcmlwdCA9IHdpbmRvd1snZG9jdW1lbnQnXS5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpO1xuICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL3d3dy5nc3RhdGljLmNvbS9jdi9qcy9zZW5kZXIvdjEvY2FzdF9zZW5kZXIuanM/bG9hZENhc3RGcmFtZXdvcms9MScpO1xuICAgIHdpbmRvd1snZG9jdW1lbnQnXS5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cbiAgICBnbG9iYWxUaGlzLkNhc3RQbGF5ZXIubWVkaWFKU09OLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuXG4gICAgcmV0dXJuIGdsb2JhbFRoaXMuQ2FzdFBsYXllci5hZGRNZWRpYUNvbnRlbnRzKCk7XG4gIH07XG5cbiAgaW5pdGlhbGl6ZShtZWRpYUNvbnRlbnRzOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAobWVkaWFDb250ZW50cykge1xuICAgICAgZ2xvYmFsVGhpcy5DYXN0UGxheWVyLmluaXRpYWxpemVVSSgpO1xuICAgICAgZ2xvYmFsVGhpcy5DYXN0UGxheWVyLnNldHVwTG9jYWxQbGF5ZXIoKTtcbiAgICAgIHRoaXMud2luZG93WydfX29uR0Nhc3RBcGlBdmFpbGFibGUnXSA9IChpc0F2YWlsYWJsZTogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICBnbG9iYWxUaGlzLkNhc3RQbGF5ZXIuaW5pdGlhbGl6ZUNhc3RQbGF5ZXIoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBwbGF5ID0gKCkgPT4ge1xuICAgIHRoaXMuY3VycmVudE1lZGlhLnBsYXkobnVsbCk7XG4gIH07XG5cbiAgcGF1c2UgPSAoKSA9PiB7XG4gICAgdGhpcy5jdXJyZW50TWVkaWEucGF1c2UobnVsbCk7XG4gIH07XG5cbiAgc3RvcCA9ICgpID0+IHtcbiAgICB0aGlzLmN1cnJlbnRNZWRpYS5zdG9wKG51bGwpO1xuICB9O1xuXG4gIG9uTWVkaWFFcnJvciA9IChlcnI6IGFueSkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxhdW5jaGluZyBtZWRpYScsIGVycik7XG4gIH07XG5cbiAgc2V0Q2FzdGluZyh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5zdGF0dXMuY2FzdGluZyA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXR1c1xuICB9XG59XG4iXX0=