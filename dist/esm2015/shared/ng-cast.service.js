import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
let NgCastService = class NgCastService {
    constructor() {
        this.window = window;
        this.status = {
            casting: false
        };
        this.onInitSuccess = function () {
            console.log('GCast initialization success');
        };
        this.onError = function (err) {
            console.log('GCast initialization failed', err);
        };
        this.discoverDevices = () => {
            let self = this;
            let subj = new Subject();
            this.cast.requestSession((s) => {
                self.session = s;
                self.setCasting(true);
                subj.next('CONNECTED');
            }, function (err) {
                self.setCasting(false);
                if (err.code === 'cancel') {
                    self.session = undefined;
                    subj.next('CANCEL');
                }
                else {
                    console.error('Error selecting a cast device', err);
                }
            });
            return subj;
        };
        this.onMediaDiscovered = (categories) => {
            let script = window['document'].createElement('script');
            script.setAttribute('type', 'text/javascript');
            script.setAttribute('src', 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1');
            window['document'].body.appendChild(script);
            let media = window['document'].createElement('script');
            media.setAttribute('type', 'text/javascript');
            media.setAttribute('src', '/assets/lib/media.js');
            window['document'].body.appendChild(media);
            let castVideo = window['document'].createElement('script');
            media.setAttribute('type', 'text/javascript');
            media.setAttribute('src', '/assets/lib/castVideo.js');
            window['document'].body.appendChild(castVideo);
            let ads = window['document'].createElement('script');
            media.setAttribute('type', 'text/javascript');
            media.setAttribute('src', '/assets/lib/ads.js');
            window['document'].body.appendChild(ads);
            mediaJSON.categories = categories;
        };
        this.play = () => {
            this.currentMedia.play(null);
        };
        this.pause = () => {
            this.currentMedia.pause(null);
        };
        this.stop = () => {
            this.currentMedia.stop(null);
        };
        this.onMediaError = (err) => {
            console.error('Error launching media', err);
        };
    }
    initializeCastApi() {
        this.cast = this.window['chrome'].cast;
        let sessionRequest = new this.cast.SessionRequest(this.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID);
        let apiConfig = new this.cast.ApiConfig(sessionRequest, () => { }, (status) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } });
        let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);
    }
    ;
    setCasting(value) {
        this.status.casting = value;
    }
    getStatus() {
        return this.status;
    }
};
NgCastService = tslib_1.__decorate([
    Injectable()
], NgCastService);
export { NgCastService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2FzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RoaW5rZXIvZGV2L3RoaW5rYW0vbmdDYXN0LyIsInNvdXJjZXMiOlsic2hhcmVkL25nLWNhc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSy9CLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFXeEI7UUFOUSxXQUFNLEdBQVEsTUFBTSxDQUFDO1FBRXRCLFdBQU0sR0FBRztZQUNkLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQWdCRixrQkFBYSxHQUFHO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUVGLFlBQU8sR0FBRyxVQUFVLEdBQVE7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUM7UUFFRixvQkFBZSxHQUFHLEdBQUcsRUFBRTtZQUNyQixJQUFJLElBQUksR0FBUSxJQUFJLENBQUM7WUFDckIsSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QixDQUFDLEVBQUUsVUFBVSxHQUFRO2dCQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO29C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QUFDLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNqRyxJQUFJLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFDcEQsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUNULENBQUMsTUFBVyxFQUFFLEVBQUUsR0FBRyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUNsRixDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFBQSxDQUFDO0lBcUVGLFVBQVUsQ0FBQyxLQUFVO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUNwQixDQUFDO0NBQ0YsQ0FBQTtBQW5HWSxhQUFhO0lBRHpCLFVBQVUsRUFBRTtHQUNBLGFBQWEsQ0FtR3pCO1NBbkdZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSB2YXIgbWVkaWFKU09OOiBhbnk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ0Nhc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjYXN0OiBhbnk7XG4gIHByaXZhdGUgY2hyb21lOiBhbnk7XG4gIHByaXZhdGUgc2Vzc2lvbjogYW55O1xuICBwcml2YXRlIGN1cnJlbnRNZWRpYTogYW55O1xuICBwcml2YXRlIHdpbmRvdzogYW55ID0gd2luZG93O1xuXG4gIHB1YmxpYyBzdGF0dXMgPSB7XG4gICAgY2FzdGluZzogZmFsc2VcbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBcbiAgfVxuXG4gIGluaXRpYWxpemVDYXN0QXBpKCkge1xuICAgIHRoaXMuY2FzdCA9IHRoaXMud2luZG93WydjaHJvbWUnXS5jYXN0O1xuICAgIGxldCBzZXNzaW9uUmVxdWVzdCA9IG5ldyB0aGlzLmNhc3QuU2Vzc2lvblJlcXVlc3QodGhpcy5jYXN0Lm1lZGlhLkRFRkFVTFRfTUVESUFfUkVDRUlWRVJfQVBQX0lEKTtcbiAgICBsZXQgYXBpQ29uZmlnID0gbmV3IHRoaXMuY2FzdC5BcGlDb25maWcoc2Vzc2lvblJlcXVlc3QsXG4gICAgICAoKSA9PiB7IH0sXG4gICAgICAoc3RhdHVzOiBhbnkpID0+IHsgaWYgKHN0YXR1cyA9PT0gdGhpcy5jYXN0LlJlY2VpdmVyQXZhaWxhYmlsaXR5LkFWQUlMQUJMRSkgeyB9IH1cbiAgICApO1xuICAgIGxldCB4ID0gdGhpcy5jYXN0LmluaXRpYWxpemUoYXBpQ29uZmlnLCB0aGlzLm9uSW5pdFN1Y2Nlc3MsIHRoaXMub25FcnJvcik7XG4gIH07XG5cbiAgb25Jbml0U3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnR0Nhc3QgaW5pdGlhbGl6YXRpb24gc3VjY2VzcycpO1xuICB9O1xuXG4gIG9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygnR0Nhc3QgaW5pdGlhbGl6YXRpb24gZmFpbGVkJywgZXJyKTtcbiAgfTtcblxuICBkaXNjb3ZlckRldmljZXMgPSAoKSA9PiB7XG4gICAgbGV0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgbGV0IHN1YmogPSBuZXcgU3ViamVjdCgpO1xuICAgIHRoaXMuY2FzdC5yZXF1ZXN0U2Vzc2lvbigoczogYW55KSA9PiB7XG4gICAgICBzZWxmLnNlc3Npb24gPSBzO1xuICAgICAgc2VsZi5zZXRDYXN0aW5nKHRydWUpO1xuICAgICAgc3Viai5uZXh0KCdDT05ORUNURUQnKTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyOiBhbnkpIHtcbiAgICAgIHNlbGYuc2V0Q2FzdGluZyhmYWxzZSk7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdjYW5jZWwnKSB7XG4gICAgICAgIHNlbGYuc2Vzc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgc3Viai5uZXh0KCdDQU5DRUwnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlbGVjdGluZyBhIGNhc3QgZGV2aWNlJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3ViajtcbiAgfTtcblxuICBvbk1lZGlhRGlzY292ZXJlZCA9IChjYXRlZ29yaWVzOiBhbnlbXSkgPT4ge1xuICAgIGxldCBzY3JpcHQgPSB3aW5kb3dbJ2RvY3VtZW50J10uY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCAnaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY3YvanMvc2VuZGVyL3YxL2Nhc3Rfc2VuZGVyLmpzP2xvYWRDYXN0RnJhbWV3b3JrPTEnKTtcbiAgICB3aW5kb3dbJ2RvY3VtZW50J10uYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXG4gICAgbGV0IG1lZGlhID0gd2luZG93Wydkb2N1bWVudCddLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIG1lZGlhLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTtcbiAgICBtZWRpYS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcvYXNzZXRzL2xpYi9tZWRpYS5qcycpO1xuICAgIHdpbmRvd1snZG9jdW1lbnQnXS5ib2R5LmFwcGVuZENoaWxkKG1lZGlhKTtcblxuICAgIGxldCBjYXN0VmlkZW8gPSB3aW5kb3dbJ2RvY3VtZW50J10uY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgbWVkaWEuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpO1xuICAgIG1lZGlhLnNldEF0dHJpYnV0ZSgnc3JjJywgJy9hc3NldHMvbGliL2Nhc3RWaWRlby5qcycpO1xuICAgIHdpbmRvd1snZG9jdW1lbnQnXS5ib2R5LmFwcGVuZENoaWxkKGNhc3RWaWRlbyk7XG5cbiAgICBsZXQgYWRzID0gd2luZG93Wydkb2N1bWVudCddLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIG1lZGlhLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTtcbiAgICBtZWRpYS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcvYXNzZXRzL2xpYi9hZHMuanMnKTtcbiAgICB3aW5kb3dbJ2RvY3VtZW50J10uYm9keS5hcHBlbmRDaGlsZChhZHMpO1xuXG4gICAgbWVkaWFKU09OLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICB9O1xuXG4gIHBsYXkgPSAoKSA9PiB7XG4gICAgdGhpcy5jdXJyZW50TWVkaWEucGxheShudWxsKTtcbiAgfTtcblxuICBwYXVzZSA9ICgpID0+IHtcbiAgICB0aGlzLmN1cnJlbnRNZWRpYS5wYXVzZShudWxsKTtcbiAgfTtcblxuICBzdG9wID0gKCkgPT4ge1xuICAgIHRoaXMuY3VycmVudE1lZGlhLnN0b3AobnVsbCk7XG4gIH07XG5cbiAgb25NZWRpYUVycm9yID0gKGVycjogYW55KSA9PiB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbGF1bmNoaW5nIG1lZGlhJywgZXJyKTtcbiAgfTtcblxuICBzZXRDYXN0aW5nKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLnN0YXR1cy5jYXN0aW5nID0gdmFsdWU7XG4gIH1cblxuICBnZXRTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzXG4gIH1cbn1cbiJdfQ==