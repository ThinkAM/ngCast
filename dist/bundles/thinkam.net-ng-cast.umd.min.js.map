{"version":3,"sources":["../../shared/ng-cast.service.ts","../../dto/schedule-dto.ts","../../ng-cast.component.ts","../../ng.cast.module.ts","../../cast-videos.js"],"names":["NgCastService","_this","this","window","status","casting","onInitSuccess","console","log","onError","err","discoverDevices","self","subj","Subject","cast","requestSession","s","session","setCasting","next","code","undefined","error","onMediaDiscovered","categories","script","createElement","setAttribute","body","appendChild","globalThis","CastPlayer","mediaJSON","addMediaContents","play","currentMedia","pause","stop","onMediaError","prototype","initializeCastApi","sessionRequest","SessionRequest","apiConfig","ApiConfig","ReceiverAvailability","AVAILABLE","initialize","mediaContents","initializeUI","setupLocalPlayer","initializeCastPlayer","value","setupRemotePlayer","getStatus","Injectable","ScheduleDto","data","property","hasOwnProperty","fromJS","result","init","id","tenant","name","description","url","duration","actualStart","realEnd","isActive","toJSON","NgCastComponent","ngCastService","videoImage","imageOffline","premium","srcImageOffline","currentStream","type","label","source","api","VgAPI","isDebug","streams","playlist","isHidden","isShow","currentIndex","video","appBaseUrl","ngOnInit","isAvailable","castingStatus","ngAfterViewChecked","setInterval","getPaused","onPlayerReady","getDefaultMedia","subscriptions","ended","subscribe","nextVideo","bind","setBitrate","option","vgDash","length","media","nativeElement","paused","setTimeout","openSession","closeSession","tryAgain","getVideos","getPosition","vid","document","getElementById","load","now","Date","currentTime","Math","abs","getTime","promise","then","_","catch","getMuted","muted","getMaximized","fsAPI","isFullscreen","toggleSound","toggleMaximize","toggleFullscreen","showVideoControls","hideVideoControls","Component","args","selector","template","ViewChild","VgDASH","static","Input","NgModule","schemas","CUSTOM_ELEMENTS_SCHEMA","imports","CommonModule","VgCoreModule","VgControlsModule","VgStreamingModule","VgBufferingModule","VgOverlayPlayModule","exports","providers","declarations","PROGRESS_BAR_WIDTH","FULL_VOLUME_HEIGHT","PLAYER_STATE","playerHandler","PlayerHandler","playerState","playerStateBeforeSwitch","remotePlayer","remotePlayerController","currentMediaTime","mediaDuration","timer","incrementMediaTimeHandler","incrementMediaTime","seekMediaListener","seekMedia","currentMediaIndex","fullscreen","mediaInfo","whenSkippable","liveSeekableRange","isLiveContent","options","receiverApplicationId","autoJoinPolicy","chrome","AutoJoinPolicy","ORIGIN_SCOPED","framework","CastContext","getInstance","setOptions","castPlayer","RemotePlayer","RemotePlayerController","addEventListener","RemotePlayerEventType","IS_CONNECTED_CHANGED","switchPlayer","stopProgressTimer","resetVolumeSlider","isConnected","target","setTarget","style","display","updateDisplayMessage","mediaIndex","isMediaLoaded","prepareToPlay","getMediaDuration","updateDurationDisplay","startProgressTimer","updateDisplay","loaded","currentMediaDuration","updateMediaDuration","seekTo","getCurrentMediaTime","updateCurrentTimeDisplay","setTimeString","element","time","setVolume","volumeSliderPosition","mute","unMute","isMuted","localPlayer","onMediaLoadedLocally","playerTarget","src","volume","p","height","marginTop","DEFAULT_VOLUME","showFullscreenButton","castSession","getCurrentSession","IS_PAUSED_CHANGED","isPaused","IS_MUTED_CHANGED","VOLUME_LEVEL_CHANGED","newVolume","volumeLevel","playOrPause","MediaInfo","metadata","GenericMediaMetadata","metadataType","MetadataType","GENERIC","title","images","request","LoadRequest","loadMedia","errorCode","getErrorMessage","innerHTML","getCastDevice","friendlyName","currentVolume","vScale","pos","setVolumeLevel","muteOrUnmute","seek","hideFullscreenButton","selectMedia","currentMediaInfo","marginLeft","width","seekable_window","unseekable_overlay","event","canSeek","position","parseInt","offsetX","pi","progress","seekTime","pp","pw","currentTarget","sectionStartTimeInMedia","mouseEvent","offsetY","clientHeight","clearInterval","updateProgressBarByTimer","endPlayback","isNaN","floor","getMediaTimeString","timestamp","isNegative","hours","minutes","seconds","getClockTimeString","date","getHours","getMinutes","getSeconds","ampm","slice","updateAdMarkers","getMediaSession","breaks","contentDuration","i","adBreak","isEmbedded","adPositionToMargin","removeAdMarkers","querySelectorAll","forEach","adMarker","remove","onBreakClipIdChanged","skip","isPlayingBreak","enableProgressBar","onWhenSkippableChanged","onCurrentBreakClipTimeChanged","currentBreakClipTime","skipAd","enable","progress_indicator","backgroundImage","cursor","draggable","removeEventListener","getDurationString","durationInSec","durationString","durationInMin","durationInHour","requestFullScreen","requestMethod","call","cancelFullScreen","fullscreenChangeHandler","fullscreen_expand","fullscreen_collapse","showMediaControl","media_control","opacity","hideMediaControl","context","showVolumeSlider","hideVolumeSlider","defaultVolumeSliderHeight","addVideoThumbs","ni","newdiv","divIdName","ErrorCode","API_NOT_INITIALIZED","CANCEL","CHANNEL_ERROR","EXTENSION_MISSING","INVALID_PARAMETER","RECEIVER_UNAVAILABLE","SESSION_ERROR","TIMEOUT"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\ndeclare global {\n  var CastPlayer: any;\n}\n\n@Injectable()\nexport class NgCastService {\n  private cast: any;\n  private currentMedia: any;\n  private window: any = window;\n\n  public status = {\n    casting: false\n  };\n\n  constructor() {\n    globalThis.CastPlayer.mediaJSON = {\n      categories: []\n    };\n  }\n\n  initializeCastApi() {\n    this.cast = this.window['chrome'].cast;\n    let sessionRequest = new this.cast.SessionRequest('4F8B3483');\n    let apiConfig = new this.cast.ApiConfig(sessionRequest,\n      () => { },\n      (status: any) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } }\n    );\n    let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);\n  };\n\n  onInitSuccess = function () {\n    console.log('GCast initialization success');\n  };\n\n  onError = function (err: any) {\n    console.log('GCast initialization failed', err);\n  };\n\n  discoverDevices = () => {\n    let self: any = this;\n    let subj = new Subject();\n    this.cast.requestSession((s: any) => {\n      self.session = s;\n      self.setCasting(true);\n      subj.next('CONNECTED');\n    }, function (err: any) {\n      self.setCasting(false);\n      if (err.code === 'cancel') {\n        self.session = undefined;\n        subj.next('CANCEL');\n      } else {\n        console.error('Error selecting a cast device', err);\n      }\n    });\n    return subj;\n  };\n\n  onMediaDiscovered = (categories: any[]) => {\n    let script = window['document'].createElement('script');\n    script.setAttribute('type', 'text/javascript');\n    script.setAttribute('src', 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1');\n    window['document'].body.appendChild(script);\n\n    globalThis.CastPlayer.mediaJSON.categories = categories;\n\n    return globalThis.CastPlayer.addMediaContents();\n  };\n\n  initialize(mediaContents: any): void {\n    if (mediaContents) {\n      globalThis.CastPlayer.initializeUI();\n      globalThis.CastPlayer.setupLocalPlayer();\n      globalThis.CastPlayer.initializeCastPlayer();\n    }\n  }\n\n  play = () => {\n    this.currentMedia.play(null);\n  };\n\n  pause = () => {\n    this.currentMedia.pause(null);\n  };\n\n  stop = () => {\n    this.currentMedia.stop(null);\n  };\n\n  onMediaError = (err: any) => {\n    console.error('Error launching media', err);\n  };\n\n  setCasting(value: any) {\n    this.status.casting = value;\n    globalThis.CastPlayer.setupRemotePlayer();\n  }\n\n  getStatus() {\n    return this.status\n  }\n}\n","import { TenantDto } from './tenant-dto';\n\nexport interface IScheduleDto {\n    id: string | undefined;\n    tenant: TenantDto | undefined;\n    name: string | undefined;\n    description: string | undefined;\n    url: string | undefined;\n    duration: number | undefined;\n    actualStart: Date;\n    realEnd?: Date | undefined;\n    isActive: boolean | undefined;\n}\n\nexport class ScheduleDto implements IScheduleDto {\n    id: string | undefined;\n    tenant: TenantDto | undefined;\n    name: string | undefined;\n    description: string | undefined;\n    url: string | undefined;\n    duration: number | undefined;\n    actualStart!: Date;\n    realEnd?: Date | undefined;\n    isActive: boolean | undefined;\n\n    constructor(data?: IScheduleDto) {\n        if (data) {\n            for (let property in data) {\n                if (data.hasOwnProperty(property)) {\n                    (<any>this)[property] = (<any>data)[property];\n                }\n            }\n        }\n    }\n\n    static fromJS(data: any): ScheduleDto {\n        data = typeof data === 'object' ? data : {};\n        let result = new ScheduleDto();\n        result.init(data);\n        return result;\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.id = data['id'];\n            this.tenant = data['tenant'];\n            this.name = data['name'];\n            this.description = data['description'];\n            this.url = data['url'];\n            this.duration = data['duration'];\n            this.actualStart = data['actualStart'];\n            this.realEnd = data['realEnd'];\n            this.isActive = data['isActive'];\n        }\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data['id'] = this.id;\n        data['tenant'] = this.tenant;\n        data['name'] = this.name;\n        data['description'] = this.description;\n        data['url'] = this.url;\n        data['duration'] = this.duration;\n        data['actualStart'] = this.actualStart;\n        data['realEnd'] = this.realEnd;\n        data['isActive'] = this.isActive;\n        return data;\n    }\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\n\nimport { NgCastService } from './shared/ng-cast.service';\n\nimport { VgDASH } from 'videogular2/compiled/src/streaming/vg-dash/vg-dash';\nimport { IDRMLicenseServer } from 'videogular2/compiled/src/streaming/streaming';\nimport { VgAPI, BitrateOption } from 'videogular2/compiled/core';\n\nimport { ScheduleDto } from './dto/schedule-dto';\n\nexport interface IMediaStream {\n  type: 'vod' | 'dash';\n  source: string;\n  label: string;\n  token?: string;\n  licenseServers?: IDRMLicenseServer;\n}\n\n@Component({\n  selector: 'ng-cast',\n  templateUrl: './ng-cast.component.html',\n  styleUrls: [\n    './ng-cast.component.scss'\n  ]\n})\nexport class NgCastComponent implements OnInit, AfterViewChecked {\n  @ViewChild(VgDASH, { static: false }) vgDash!: VgDASH;\n  @ViewChild('media', { static: false }) media!: ElementRef<HTMLVideoElement>;\n\n  castingStatus: any;\n  window: any;\n\n  @Input() videoImage = '';\n  @Input() imageOffline = false;\n  @Input() premium = false;\n  @Input() srcImageOffline = '';\n\n  @Input() currentStream: IMediaStream = {\n    type: 'dash',\n    label: 'DASH: Media Stream test',\n    source: 'http://livesim.dashif.org/livesim/testpic_2s/Manifest.mpd'\n  };\n\n  api: VgAPI = new VgAPI();\n\n  @Input() isDebug = false;\n\n  @Input() paused!: boolean;\n\n  @Input() streams: IMediaStream[] = [\n    {\n      type: 'dash',\n      label: 'DASH: Media Stream test',\n      source: 'http://livesim.dashif.org/livesim/testpic_2s/Manifest.mpd'\n    }\n  ];\n\n  @Input() playlist: Array<ScheduleDto> = [];\n\n  @Input() play = false;\n  @Input() isHidden = false;\n  @Input() isShow = true;\n\n  @Input() currentIndex = 0;\n  @Input() video: ScheduleDto = new ScheduleDto();\n  @Input() appBaseUrl: String = '';\n\n  constructor(\n    private ngCastService: NgCastService\n  ) { }\n\n  ngOnInit() {\n    this.window = window;\n    this.currentStream = this.streams[0];\n\n    let ngCastService = this.ngCastService;\n    this.window['__onGCastApiAvailable'] = function (isAvailable: boolean) {\n      if (isAvailable) {\n        ngCastService.initializeCastApi();\n      }\n    };\n\n    this.castingStatus = this.ngCastService.getStatus();\n  }\n\n  ngAfterViewChecked() { \n    setInterval(() => {\n      this.getPaused();\n    }, 500);\n  }\n\n  onPlayerReady(api: VgAPI) {\n    this.api = api;\n\n    this.api.getDefaultMedia().subscriptions.ended.subscribe(this.nextVideo.bind(this));\n  }\n\n  setBitrate(option: BitrateOption) {\n    switch (this.currentStream.type) {\n      case 'dash':\n        this.vgDash.setBitrate(option);\n        break;\n    }\n  }\n\n  nextVideo() {\n    this.currentIndex++;\n\n    if (this.currentIndex === this.playlist.length) {\n      this.currentIndex = 0;\n    }\n\n    this.video = this.playlist[this.currentIndex];\n  }\n\n  getPaused() {\n    if (this.media && this.media.nativeElement) {\n      this.paused = this.media.nativeElement.paused;\n      return this.media.nativeElement.paused;\n    } else {\n      setTimeout(() => {\n        return this.getPaused();\n      }, 2000);\n    }\n  }\n\n  pause(): void {\n    this.media.nativeElement.pause();\n    this.getPaused();\n  }\n\n  openSession() {\n    this.ngCastService.discoverDevices();\n  }\n\n  closeSession() {\n    this.ngCastService.discoverDevices();\n  }\n\n  tryAgain() {\n    this.imageOffline = true;\n    this.isHidden = true;\n    console.log('loading...');\n\n    setTimeout(() => {\n      this.getVideos();\n    }, 500);\n  }\n\n  getVideos(): void {\n    if (this.playlist && this.playlist.length > 0) {\n      this.imageOffline = false;\n      this.video = this.playlist[this.currentIndex];\n\n      this.getPosition(this.video);\n    } else {\n      this.video = new ScheduleDto();\n      this.tryAgain();\n    }\n  }\n\n  getPosition(result: ScheduleDto) {\n    setTimeout(() => {\n      let vid: any = document.getElementById('video_element');\n      vid.load();\n\n      const now = new Date();\n      const currentTime = Math.abs(now.getTime() - new Date(this.video.actualStart).getTime());\n\n      console.log('Temos no player: ' + result.url);\n      console.log('InÃ­cio em: ' + currentTime);\n\n      this.video.url = result.url;\n      vid['currentTime'] = currentTime / 1000;\n\n      let promise = vid.play();\n      if (promise !== undefined) {\n        promise.then((_: any) => {\n          // Autoplay started!\n          console.log('Estamos ao vivo!');\n        }).catch(() => {\n          // Autoplay was prevented.\n          // Show a \"Play\" button so that user can start playback.\n          this.play = true;\n        });\n      }\n    }, 1000);\n  }\n\n  getMuted(): boolean {\n    return this.media && this.media.nativeElement && this.media.nativeElement.muted || false;\n  }\n\n  getMaximized(): boolean {\n    return this.api && this.api.fsAPI && this.api.fsAPI.isFullscreen && this.api.fsAPI.isFullscreen || false;\n  }\n\n  toggleSound(): void {\n    this.media.nativeElement.muted = !this.media.nativeElement.muted;\n  }\n\n  toggleMaximize(): void {\n    this.api.fsAPI.toggleFullscreen(this.media);\n  }\n\n  showVideoControls(): void {\n    this.isHidden = false;\n    this.isShow = true;\n  }\n\n  hideVideoControls(): void {\n    this.isHidden = true;\n    this.isShow = false;\n  }\n}\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgCastComponent } from './ng-cast.component';\nimport { NgCastService } from './shared/ng-cast.service';\n\nimport { VgCoreModule } from 'videogular2/compiled/core';\nimport { VgControlsModule } from 'videogular2/compiled/controls';\nimport { VgStreamingModule } from 'videogular2/compiled/streaming';\nimport { VgBufferingModule } from 'videogular2/compiled/buffering';\nimport { VgOverlayPlayModule } from 'videogular2/compiled/overlay-play';\n\n@NgModule({\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\n  imports: [\n    CommonModule,\n    VgCoreModule,\n    VgControlsModule,\n    VgStreamingModule,\n    VgBufferingModule,\n    VgOverlayPlayModule,\n  ],\n  exports: [NgCastComponent],\n  providers: [NgCastService],\n  declarations: [NgCastComponent]\n})\nexport class NgCastModule { }\n","\"use strict\";\n\n/** @const {string} Media source root URL */\nconst MEDIA_SOURCE_ROOT = '';\n\n/**\n * Width of progress bar in pixel\n * @const\n */\nvar PROGRESS_BAR_WIDTH = 600;\n\n/** @const {number} Time in milliseconds for minimal progress update */\nvar TIMER_STEP = 1000;\n\n/** @const {number} Cast volume upon initial connection */\nvar DEFAULT_VOLUME = 0.5;\n\n/** @const {number} Height, in pixels, of volume bar */\nvar FULL_VOLUME_HEIGHT = 100;\n\n/** @enum {string} Constants of states for media for both local and remote playback */\nconst PLAYER_STATE = {\n  // No media is loaded into the player. For remote playback, maps to\n  // the PlayerState.IDLE state.\n  IDLE: 'IDLE',\n  LOADING: 'LOADING',\n  // Player is in PLAY mode but not actively playing content. For remote\n  // playback, maps to the PlayerState.BUFFERING state.\n  BUFFERING: 'BUFFERING',\n  // The media is loaded but not playing.\n  LOADED: 'LOADED',\n  // The media is playing. For remote playback, maps to the PlayerState.PLAYING state.\n  PLAYING: 'PLAYING',\n  // The media is paused. For remote playback, maps to the PlayerState.PAUSED state.\n  PAUSED: 'PAUSED',\n  STOPPED: 'STOPPED',\n  ERROR: 'ERROR'\n};\n\n/**\n * Cast player object\n * Main variables:\n *  - PlayerHandler object for handling media playback\n *  - Cast player variables for controlling Cast mode media playback\n *  - Current media variables for transition between Cast and local modes\n *  - Current ad variables for controlling UI based on ad playback\n *  - Current live variables for controlling UI based on ad playback\n * @struct @constructor\n */\nvar CastPlayer = function () {\n  /** @type {PlayerHandler} Delegation proxy for media playback */\n  this.playerHandler = new PlayerHandler(this);\n\n  /** @type {PLAYER_STATE} A state for media playback */\n  this.playerState = PLAYER_STATE.IDLE;\n\n  /**\n   * @type {PLAYER_STATE} Player state before switching between local and\n   * remote playback.\n   */\n  this.playerStateBeforeSwitch = null;\n\n  /* Cast player variables */\n  /** @type {cast.framework.RemotePlayer} */\n  this.remotePlayer = null;\n  /** @type {cast.framework.RemotePlayerController} */\n  this.remotePlayerController = null;\n\n  /* Local+Remote player variables */\n  /** @type {number} A number for current time in seconds. Maintained in media time. */\n  this.currentMediaTime = 0;\n  /**\n   * @type {?number} A number for current duration in seconds. Maintained in media time.\n   * Null if duration should not be shown.\n   */\n  this.mediaDuration = -1;\n\n  /** @type {?number} A timer for tracking progress of media */\n  this.timer = null;\n  /** @type {function()} Listener for handling current time increments */\n  this.incrementMediaTimeHandler = this.incrementMediaTime.bind(this);\n  /** @type {function()} Listener to be added/removed for the seek action */\n  this.seekMediaListener = this.seekMedia.bind(this);\n\n  /* Local player variables */\n  /** @type {number} A number for current media index */\n  this.currentMediaIndex = 0;\n  /** @type {?Object} media contents from JSON */\n  this.mediaContents = null;\n  /** @type {boolean} Fullscreen mode on/off */\n  this.fullscreen = false;\n\n  /* Remote Player variables */\n  /** @type {?chrome.cast.media.MediaInfo} Current mediaInfo */\n  this.mediaInfo = null;\n  /* Ad variables */\n  /**\n   * @type {?number} The time in seconds when the break clip becomes skippable.\n   * 5 means that the end user can skip this break clip after 5 seconds. If\n   * negative or not defined, it means that the current break clip is not skippable.\n   */\n  this.whenSkippable = null;\n\n  /* Live variables */\n  /** @type {?chrome.cast.media.LiveSeekableRange} Seekable range for live content */\n  this.liveSeekableRange = null;\n  /** @type {boolean} Remote player is playing live content. */\n  this.isLiveContent = false;\n\n  this.mediaJSON = {\n    'categories': []\n  };\n};\n\nCastPlayer.prototype.initializeCastPlayer = () => {\n  var options = {};\n\n  // Set the receiver application ID to your own (created in the\n  // Google Cast Developer Console), or optionally\n  // use the chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID\n  options.receiverApplicationId = '4F8B3483';\n\n  // Auto join policy can be one of the following three:\n  // ORIGIN_SCOPED - Auto connect from same appId and page origin\n  // TAB_AND_ORIGIN_SCOPED - Auto connect from same appId, page origin, and tab\n  // PAGE_SCOPED - No auto connect\n  options.autoJoinPolicy = chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n  cast.framework.CastContext.getInstance().setOptions(options);\n\n  castPlayer.remotePlayer = new cast.framework.RemotePlayer();\n  castPlayer.remotePlayerController = new cast.framework.RemotePlayerController(castPlayer.remotePlayer);\n  castPlayer.remotePlayerController.addEventListener(\n      cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED,\n      castPlayer.switchPlayer.bind(castPlayer)\n  );\n};\n\n/**\n * Switch between the remote and local players.\n */\nCastPlayer.prototype.switchPlayer = () => {\n  castPlayer.stopProgressTimer();\n  castPlayer.resetVolumeSlider();\n  castPlayer.playerHandler.stop();\n  castPlayer.playerState = PLAYER_STATE.IDLE;\n  if (cast && cast.framework) {\n      if (castPlayer.remotePlayer.isConnected) {\n        castPlayer.setupRemotePlayer();\n          return;\n      }\n  }\n  castPlayer.setupLocalPlayer();\n};\n\n/**\n * PlayerHandler\n *\n * This is a handler through which the application will interact\n * with both the RemotePlayer and LocalPlayer. Combining these two into\n * one interface is one approach to the dual-player nature of a Cast\n * Chrome application. Otherwise, the state of the RemotePlayer can be\n * queried at any time to decide whether to interact with the local\n * or remote players.\n *\n * To set the player used, implement the following methods for a target object\n * and call setTarget(target).\n *\n * Methods to implement:\n *  - play()\n *  - pause()\n *  - stop()\n *  - seekTo(time)\n *  - load(mediaIndex)\n *  - isMediaLoaded(mediaIndex)\n *  - prepareToPlay()\n *  - getMediaDuration()\n *  - getCurrentMediaTime()\n *  - setVolume(volumeSliderPosition)\n *  - mute()\n *  - unMute()\n *  - isMuted()\n *  - updateDisplay()\n *  - updateCurrentTimeDisplay()\n *  - updateDurationDisplay()\n *  - setTimeString(element, time)\n */\nvar PlayerHandler = function (castPlayer) {\n  this.target = {};\n\n  this.setTarget = function (target) {\n    this.target = target;\n  };\n\n  this.play = function () {\n    if (castPlayer.playerState !== PLAYER_STATE.PLAYING &&\n      castPlayer.playerState !== PLAYER_STATE.PAUSED &&\n      castPlayer.playerState !== PLAYER_STATE.LOADED) {\n      this.load(castPlayer.currentMediaIndex);\n      return;\n    }\n\n    this.target.play();\n    castPlayer.playerState = PLAYER_STATE.PLAYING;\n    \n    let play = document.getElementById('play');\n    if (play && play.style && play.style.display)\n      play.style.display = 'none';\n\n    let pause = document.getElementById('pause');\n    if (pause && pause.style && pause.style.display)\n      pause.style.display = 'block';\n      \n    this.updateDisplayMessage();\n  };\n\n  this.updateDisplayMessage = function () {\n    this.target.updateDisplayMessage();\n  }\n\n  this.pause = function () {\n    this.target.pause();\n    castPlayer.playerState = PLAYER_STATE.PAUSED;\n    document.getElementById('play').style.display = 'block';\n    document.getElementById('pause').style.display = 'none';\n  };\n\n  this.stop = function () {\n    castPlayer.playerState = PLAYER_STATE.IDLE;\n    this.target.stop();\n  };\n\n  this.load = function (mediaIndex = null) {\n    if (!mediaIndex) {\n      mediaIndex = castPlayer.currentMediaIndex;\n    }\n    castPlayer.playerState = PLAYER_STATE.BUFFERING;\n    this.target.load(mediaIndex);\n  };\n\n  /**\n   * Check if media has been loaded on the target player.\n   * @param {number?} mediaIndex The desired media index. If null, verify if\n   *  any media is loaded.\n   */\n  this.isMediaLoaded = function (mediaIndex) {\n    return this.target.isMediaLoaded(mediaIndex);\n  };\n\n  /**\n   * Called after media has been successfully loaded and is ready to start playback.\n   * When local, will start playing the video, start the timer, and update the UI.\n   * When remote, will set the UI to PLAYING and start the timer to update the\n   *   UI based on remote playback.\n   */\n  this.prepareToPlay = function () {\n    castPlayer.mediaDuration = this.getMediaDuration();\n    castPlayer.playerHandler.updateDurationDisplay();\n    castPlayer.playerState = PLAYER_STATE.LOADED;\n\n    this.play();\n    castPlayer.startProgressTimer();\n    this.updateDisplay();\n  };\n\n  this.loaded = function() {\n    castPlayer.currentMediaDuration = this.getMediaDuration();\n    castPlayer.updateMediaDuration();\n    castPlayer.playerState = PLAYER_STATE.LOADED;\n    if (castPlayer.currentMediaTime > 0) {\n        this.seekTo(castPlayer.currentMediaTime);\n    }\n    this.play();\n    castPlayer.startProgressTimer();\n    this.updateDisplayMessage();\n  };\n\n  this.getCurrentMediaTime = function () {\n    return this.target.getCurrentMediaTime();\n  };\n\n  this.getMediaDuration = function () {\n    return this.target.getMediaDuration();\n  };\n\n  this.updateDisplay = function () {\n    // Update local variables\n    this.currentMediaTime = this.target.getCurrentMediaTime();\n    this.mediaDuration = this.target.getMediaDuration();\n\n    this.target.updateDisplay();\n  };\n\n  this.updateCurrentTimeDisplay = function () {\n    this.target.updateCurrentTimeDisplay();\n  };\n\n  /**\n   * Determines the correct time string (media or clock) and sets it for the given element.\n   */\n  this.setTimeString = function (element, time) {\n    this.target.setTimeString(element, time);\n  };\n\n  this.setVolume = function (volumeSliderPosition) {\n    this.target.setVolume(volumeSliderPosition);\n  };\n\n  this.mute = function () {\n    this.target.mute();\n    document.getElementById('audio_on').style.display = 'none';\n    document.getElementById('audio_off').style.display = 'block';\n  };\n\n  this.unMute = function () {\n    this.target.unMute();\n    document.getElementById('audio_on').style.display = 'block';\n    document.getElementById('audio_off').style.display = 'none';\n  };\n\n  this.isMuted = function () {\n    return this.target.isMuted();\n  };\n\n  this.seekTo = function (time) {\n    this.target.seekTo(time);\n  };\n};\n\n/**\n * Set the PlayerHandler target to use the video-element player\n */\nCastPlayer.prototype.setupLocalPlayer = () => {\n  var localPlayer = document.getElementById('video_element');\n  localPlayer.addEventListener(\n    'loadeddata', castPlayer.onMediaLoadedLocally.bind(castPlayer));\n\n  // This object will implement PlayerHandler callbacks with localPlayer\n  var playerTarget = {};\n\n  playerTarget.play = () => {\n    localPlayer.play();\n\n    localPlayer.style.display = 'block';\n  };\n\n  playerTarget.pause = function () {\n    localPlayer.pause();\n  };\n\n  playerTarget.stop = function () {\n    if (typeof localPlayer.stop === \"function\")\n      localPlayer.stop();\n  };\n\n  playerTarget.load = function (mediaIndex) {\n    localPlayer.src =\n      castPlayer.mediaContents[mediaIndex]['sources'][0];\n    localPlayer.load();\n  }.bind(castPlayer);\n\n  playerTarget.getCurrentMediaTime = function () {\n    return localPlayer.currentTime;\n  };\n\n  playerTarget.getMediaDuration = function () {\n    return localPlayer.duration;\n  };\n\n  playerTarget.updateDisplayMessage = function () {\n    document.getElementById('playerstate').style.display = 'none';\n    document.getElementById('playerstatebg').style.display = 'none';\n    document.getElementById('video_image_overlay').style.display = 'none';\n  };\n\n  playerTarget.setVolume = function (volumeSliderPosition) {\n    localPlayer.volume = volumeSliderPosition < FULL_VOLUME_HEIGHT ?\n      volumeSliderPosition / FULL_VOLUME_HEIGHT : 1;\n    var p = document.getElementById('audio_bg_level');\n    p.style.height = volumeSliderPosition + 'px';\n    p.style.marginTop = -volumeSliderPosition + 'px';\n  };\n\n  playerTarget.mute = function () {\n    localPlayer.muted = true;\n  };\n\n  playerTarget.unMute = function () {\n    localPlayer.muted = false;\n  };\n\n  playerTarget.isMuted = function () {\n    return localPlayer.muted;\n  };\n\n  playerTarget.seekTo = function (time) {\n    localPlayer.currentTime = time;\n  };\n\n  castPlayer.playerHandler.setTarget(playerTarget);\n\n  castPlayer.playerHandler.setVolume(DEFAULT_VOLUME * FULL_VOLUME_HEIGHT);\n\n  castPlayer.showFullscreenButton();\n\n  if (castPlayer.currentMediaTime > 0) {\n    castPlayer.playerHandler.play();\n  }\n};\n\n/**\n * Set the PlayerHandler target to use the remote player\n * Add event listeners for player changes which may occur outside sender app.\n */\nCastPlayer.prototype.setupRemotePlayer = function () {\n  var castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n\n  // Add event listeners for player changes which may occur outside sender app\n  castPlayer.remotePlayerController.addEventListener(\n      cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED,\n      function() {\n          if (castPlayer.remotePlayer.isPaused) {\n              castPlayer.playerHandler.pause();\n          } else {\n              castPlayer.playerHandler.play();\n          }\n      }.bind(castPlayer)\n  );\n\n  castPlayer.remotePlayerController.addEventListener(\n      cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED,\n      function() {\n          if (castPlayer.remotePlayer.isMuted) {\n              castPlayer.playerHandler.mute();\n          } else {\n              castPlayer.playerHandler.unMute();\n          }\n      }.bind(castPlayer)\n  );\n\n  castPlayer.remotePlayerController.addEventListener(\n      cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED,\n      function() {\n          var newVolume = castPlayer.remotePlayer.volumeLevel * FULL_VOLUME_HEIGHT;\n          var p = document.getElementById('audio_bg_level');\n          p.style.height = newVolume + 'px';\n          p.style.marginTop = -newVolume + 'px';\n      }.bind(castPlayer)\n  );\n\n  // castPlayer object will implement PlayerHandler callbacks with\n  // remotePlayerController, and makes necessary UI updates specific\n  // to remote playback\n  var playerTarget = {};\n\n  playerTarget.play = function () {\n      if (castPlayer.remotePlayer.isPaused) {\n          castPlayer.remotePlayerController.playOrPause();\n      }\n\n      var vi = document.getElementById('video_image');\n      vi.style.display = 'block';\n      var localPlayer = document.getElementById('video_element');\n      localPlayer.style.display = 'none';\n  }.bind(castPlayer);\n\n  playerTarget.pause = function () {\n      if (!castPlayer.remotePlayer.isPaused) {\n          castPlayer.remotePlayerController.playOrPause();\n      }\n  }.bind(castPlayer);\n\n  playerTarget.stop = function () {\n       castPlayer.remotePlayerController.stop();\n  }.bind(castPlayer);\n\n  playerTarget.load = function (mediaIndex) {\n      console.log('Loading...' + castPlayer.mediaContents[mediaIndex]['title']);\n      var mediaInfo = new chrome.cast.media.MediaInfo(\n          castPlayer.mediaContents[mediaIndex]['sources'][0], 'video/mp4');\n\n      mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();\n      mediaInfo.metadata.metadataType = chrome.cast.media.MetadataType.GENERIC;\n      mediaInfo.metadata.title = castPlayer.mediaContents[mediaIndex]['title'];\n      mediaInfo.metadata.images = [\n          {'url': MEDIA_SOURCE_ROOT + castPlayer.mediaContents[mediaIndex]['thumb']}];\n\n      var request = new chrome.cast.media.LoadRequest(mediaInfo);\n      castSession.loadMedia(request).then(\n          castPlayer.playerHandler.loaded.bind(castPlayer.playerHandler),\n          function (errorCode) {\n              castPlayer.playerState = PLAYER_STATE.ERROR;\n              console.log('Remote media load error: ' +\n                  CastPlayer.getErrorMessage(errorCode));\n          }.bind(castPlayer));\n  }.bind(castPlayer);\n\n  playerTarget.getCurrentMediaTime = function() {\n      return castPlayer.remotePlayer.currentTime;\n  }.bind(castPlayer);\n\n  playerTarget.getMediaDuration = function() {\n      return castPlayer.remotePlayer.duration;\n  }.bind(castPlayer);\n\n  playerTarget.updateDisplayMessage = function () {\n      document.getElementById('playerstate').style.display = 'block';\n      document.getElementById('playerstatebg').style.display = 'block';\n      document.getElementById('video_image_overlay').style.display = 'block';\n      document.getElementById('playerstate').innerHTML =\n          castPlayer.mediaContents[ castPlayer.currentMediaIndex]['title'] + ' ' +\n          castPlayer.playerState + ' on ' + castSession.getCastDevice().friendlyName;\n  }.bind(castPlayer);\n\n  playerTarget.setVolume = function (volumeSliderPosition) {\n      // Add resistance to avoid loud volume\n      var currentVolume = castPlayer.remotePlayer.volumeLevel;\n      var p = document.getElementById('audio_bg_level');\n      if (volumeSliderPosition < FULL_VOLUME_HEIGHT) {\n          var vScale =  castPlayer.currentVolume * FULL_VOLUME_HEIGHT;\n          if (volumeSliderPosition > vScale) {\n              volumeSliderPosition = vScale + (pos - vScale) / 2;\n          }\n          p.style.height = volumeSliderPosition + 'px';\n          p.style.marginTop = -volumeSliderPosition + 'px';\n          currentVolume = volumeSliderPosition / FULL_VOLUME_HEIGHT;\n      } else {\n          currentVolume = 1;\n      }\n      castPlayer.remotePlayer.volumeLevel = currentVolume;\n      castPlayer.remotePlayerController.setVolumeLevel();\n  }.bind(castPlayer);\n\n  playerTarget.mute = function () {\n      if (!castPlayer.remotePlayer.isMuted) {\n          castPlayer.remotePlayerController.muteOrUnmute();\n      }\n  }.bind(castPlayer);\n\n  playerTarget.unMute = function () {\n      if (castPlayer.remotePlayer.isMuted) {\n          castPlayer.remotePlayerController.muteOrUnmute();\n      }\n  }.bind(castPlayer);\n\n  playerTarget.isMuted = function() {\n      return castPlayer.remotePlayer.isMuted;\n  }.bind(castPlayer);\n\n  playerTarget.seekTo = function (time) {\n      castPlayer.remotePlayer.currentTime = time;\n      castPlayer.remotePlayerController.seek();\n  }.bind(castPlayer);\n\n  castPlayer.playerHandler.setTarget(playerTarget);\n\n  // Setup remote player volume right on setup\n  // The remote player may have had a volume set from previous playback\n  if (castPlayer.remotePlayer.isMuted) {\n      castPlayer.playerHandler.mute();\n  }\n  var currentVolume = castPlayer.remotePlayer.volumeLevel * FULL_VOLUME_HEIGHT;\n  var p = document.getElementById('audio_bg_level');\n  p.style.height = currentVolume + 'px';\n  p.style.marginTop = -currentVolume + 'px';\n\n  castPlayer.hideFullscreenButton();\n\n  castPlayer.playerHandler.play();\n};\n\n/**\n * Callback when media is loaded in local player\n */\nCastPlayer.prototype.onMediaLoadedLocally = function () {\n  var localPlayer = document.getElementById('video_element');\n  localPlayer.currentTime = castPlayer.currentMediaTime;\n\n  castPlayer.playerHandler.loaded();\n};\n\n/**\n * Select a media content\n * @param {number} mediaIndex A number for media index\n */\nCastPlayer.prototype.selectMedia = function (mediaIndex) {\n  console.log('Media index selected: ' + mediaIndex);\n\n  castPlayer.currentMediaIndex = mediaIndex;\n  // Clear currentMediaInfo when playing content from the sender.\n  castPlayer.playerHandler.currentMediaInfo = undefined;\n\n  // Set video image\n  var vi = document.getElementById('video_image');\n  vi.src = MEDIA_SOURCE_ROOT + castPlayer.mediaContents[mediaIndex]['thumb'];\n\n  // Reset progress bar\n  var pi = document.getElementById('progress_indicator');\n  pi.style.marginLeft = '0px';\n  var progress = document.getElementById('progress');\n  progress.style.width = '0px';\n\n  let seekable_window = document.getElementById('seekable_window');\n  let unseekable_overlay = document.getElementById('unseekable_overlay');\n  seekable_window.style.width = PROGRESS_BAR_WIDTH;\n  unseekable_overlay.style.width = '0px';\n\n  // Stop timer and reset time displays\n  castPlayer.stopProgressTimer();\n  castPlayer.currentMediaTime = 0;\n  castPlayer.playerHandler.setTimeString(document.getElementById('currentTime'), 0);\n  castPlayer.playerHandler.setTimeString(document.getElementById('duration'), 0);\n\n  castPlayer.playerState = PLAYER_STATE.IDLE;\n  castPlayer.playerHandler.play();\n};\n\n/**\n * Media seek function\n * @param {Event} event An event object from seek\n */\nCastPlayer.prototype.seekMedia = function (event) {\n  if (castPlayer.mediaDuration == null || (cast.framework.CastContext.getInstance().getCurrentSession() && !castPlayer.remotePlayer.canSeek)) {\n    console.log('Error - Not seekable');\n    return;\n  }\n\n  if (castPlayer.isLiveContent && !castPlayer.liveSeekableRange) {\n    console.log('Live content has no seekable range.')\n    return;\n  }\n\n  var position = parseInt(event.offsetX, 10);\n  var pi = document.getElementById('progress_indicator');\n  var progress = document.getElementById('progress');\n  let seekTime = 0;\n  let pp = 0;\n  let pw = 0;\n  if (event.currentTarget.id == 'progress_indicator') {\n    seekTime = parseInt(castPlayer.currentMediaTime + castPlayer.mediaDuration * position /\n      PROGRESS_BAR_WIDTH, 10);\n    pp = parseInt(pi.style.marginLeft, 10) + position;\n    pw = parseInt(progress.style.width, 10) + position;\n  } else {\n    seekTime = parseInt(position * castPlayer.mediaDuration / PROGRESS_BAR_WIDTH, 10);\n    pp = position;\n    pw = position;\n  }\n\n  if (castPlayer.playerState === PLAYER_STATE.PLAYING ||\n    castPlayer.playerState === PLAYER_STATE.PAUSED) {\n    castPlayer.currentMediaTime = seekTime;\n    progress.style.width = pw + 'px';\n    pi.style.marginLeft = pp + 'px';\n  }\n\n  if (castPlayer.isLiveContent) {\n    seekTime += castPlayer.mediaInfo.metadata.sectionStartTimeInMedia;\n  }\n\n  castPlayer.playerHandler.seekTo(seekTime);\n};\n\n/**\n * Set current player volume\n * @param {Event} mouseEvent\n */\nCastPlayer.prototype.setVolume = function (mouseEvent) {\n  var p = document.getElementById('audio_bg_level');\n  var pos = 0;\n  if (mouseEvent.currentTarget.id === 'audio_bg_track') {\n    pos = FULL_VOLUME_HEIGHT - parseInt(mouseEvent.offsetY, 10);\n  } else {\n    pos = parseInt(p.clientHeight, 10) - parseInt(mouseEvent.offsetY, 10);\n  }\n  castPlayer.playerHandler.setVolume(pos);\n};\n\n/**\n * Starts the timer to increment the media progress bar\n */\nCastPlayer.prototype.startProgressTimer = function () {\n  castPlayer.stopProgressTimer();\n\n  // Start progress timer\n  castPlayer.timer = setInterval(castPlayer.incrementMediaTimeHandler, TIMER_STEP);\n};\n\n/**\n * Stops the timer to increment the media progress bar\n */\nCastPlayer.prototype.stopProgressTimer = function () {\n  if (castPlayer.timer) {\n    clearInterval(castPlayer.timer);\n    castPlayer.timer = null;\n  }\n};\n\n/**\n * Increment media current time depending on remote or local playback\n */\nCastPlayer.prototype.incrementMediaTime = () => {\n    // First sync with the current player's time\n    castPlayer.currentMediaTime = castPlayer.playerHandler.getCurrentMediaTime();\n    castPlayer.currentMediaDuration = castPlayer.playerHandler.getMediaDuration();\n\n    if (castPlayer.playerState === PLAYER_STATE.PLAYING) {\n        if (castPlayer.currentMediaTime < castPlayer.currentMediaDuration) {\n          castPlayer.currentMediaTime += 1;\n          castPlayer.updateProgressBarByTimer();\n        } else {\n          castPlayer.endPlayback();\n        }\n    }\n};\n\n/**\n * Update progress bar and currentTime based on timer\n */\nCastPlayer.prototype.updateProgressBarByTimer = function () {\n  var p = document.getElementById('progress');\n  if (isNaN(parseInt(p.style.width, 10))) {\n      p.style.width = 0;\n  }\n  if (castPlayer.currentMediaDuration > 0) {\n      var pp = Math.floor(\n          PROGRESS_BAR_WIDTH * castPlayer.currentMediaTime / castPlayer.currentMediaDuration);\n  }\n\n  p.style.width = pp + 'px';\n  var pi = document.getElementById('progress_indicator');\n  pi.style.marginLeft = -21 - PROGRESS_BAR_WIDTH + pp + 'px';\n\n  if (pp >= PROGRESS_BAR_WIDTH) {\n    castPlayer.endPlayback();\n  }\n};\n\n/**\n *  End playback. Called when media ends.\n */\nCastPlayer.prototype.endPlayback = function () {\n  castPlayer.currentMediaTime = 0;\n  castPlayer.stopProgressTimer();\n  castPlayer.playerState = PLAYER_STATE.IDLE;\n  castPlayer.playerHandler.updateDisplay();\n\n  let play = document.getElementById('play');\n  if (play && play.style && play.display)\n    play.style.display = 'block';\n\n  let pause = document.getElementById('pause');\n  if (pause && pause.style && pause.style.display)\n    pause.style.display = 'none';\n};\n\n/**\n * @param {?number} timestamp Linux timestamp\n * @return {?string} media time string. Null if time is invalid.\n */\nCastPlayer.prototype.getMediaTimeString = function (timestamp) {\n  if (timestamp == undefined || timestamp == null) {\n    return null;\n  }\n\n  let isNegative = false;\n  if (timestamp < 0) {\n    isNegative = true;\n    timestamp *= -1;\n  }\n\n  let hours = Math.floor(timestamp / 3600);\n  let minutes = Math.floor((timestamp - (hours * 3600)) / 60);\n  let seconds = Math.floor(timestamp - (hours * 3600) - (minutes * 60));\n\n  if (hours < 10) hours = '0' + hours;\n  if (minutes < 10) minutes = '0' + minutes;\n  if (seconds < 10) seconds = '0' + seconds;\n\n  return (isNegative ? '-' : '') + hours + ':' + minutes + ':' + seconds;\n};\n\n/**\n * @param {number} timestamp Linux timestamp\n * @return {?string} ClockTime string. Null if time is invalid.\n */\nCastPlayer.prototype.getClockTimeString = function (timestamp) {\n  if (!timestamp) return \"0:00:00\";\n\n  let date = new Date(timestamp * 1000);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let seconds = date.getSeconds();\n  let ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  // Hour '0' should be '12'\n  hours = hours ? hours : 12;\n  minutes = ('0' + minutes).slice(-2);\n  seconds = ('0' + seconds).slice(-2);\n  let clockTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\n  return clockTime;\n};\n\n/**\n * Updates Ad markers in UI\n */\nCastPlayer.prototype.updateAdMarkers = function () {\n  let castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  if (!castSession) return;\n\n  let media = castSession.getMediaSession();\n  if (!media) return;\n\n  let mediaInfo = media.media;\n  if (!mediaInfo) return;\n\n  let breaks = mediaInfo.breaks;\n  let contentDuration = mediaInfo.duration;\n\n  if (!breaks) {\n    return;\n  }\n\n  for (var i = 0; i < breaks.length; i++) {\n    let adBreak = breaks[i];\n\n    // Server-side stitched Ads (embedded) are skipped when the position is beyond\n    // the duration, so they shouldn't be shown with an ad marker on the UI.\n    if (adBreak.position > contentDuration && adBreak.isEmbedded) {\n      continue;\n    }\n\n    // Place marker if not already set in position\n    if (!document.getElementById('ad' + adBreak.position)) {\n      var div = document.getElementById('progress')\n      div.innerHTML += '<div class=\"adMarker\" id=\"ad' + adBreak.position +\n        '\" style=\"margin-left: ' +\n        castPlayer.adPositionToMargin(adBreak.position, contentDuration) + 'px\"></div>';\n    }\n  }\n};\n\n/**\n * Remove Ad markers in UI\n */\nCastPlayer.prototype.removeAdMarkers = function () {\n  document.querySelectorAll('.adMarker').forEach(function (adMarker) {\n    adMarker.remove();\n  });\n};\n\n/**\n * Position of the ad marker from the margin\n */\nCastPlayer.prototype.adPositionToMargin = function (position, contentDuration) {\n  // Post-roll\n  if (position == -1) {\n    return PROGRESS_BAR_WIDTH;\n  }\n\n  // Client stitched Ads (not embedded) beyond the duration, will play at the\n  // end of the content.\n  if (position > contentDuration) {\n    return PROGRESS_BAR_WIDTH;\n  }\n\n  // Convert Ad position to margin\n  return (PROGRESS_BAR_WIDTH * position) / contentDuration;\n};\n\n/**\n * Handle BREAK_CLIP_ID_CHANGED event\n */\nCastPlayer.prototype.onBreakClipIdChanged = function () {\n  // Hide skip button when switching to a new breakClip\n  let skip = document.getElementById('skip');\n  if (skip && skip.style && skip.style.display)\n    skip.style.display = 'none';\n};\n\n/**\n * Disable progress bar if playing a break.\n */\nCastPlayer.prototype.isPlayingBreak = function (isPlayingBreak) {\n  castPlayer.enableProgressBar(!isPlayingBreak);\n};\n\n/**\n * Handle WHEN_SKIPPABLE_CHANGED event\n */\nCastPlayer.prototype.onWhenSkippableChanged = function (whenSkippable) {\n  castPlayer.whenSkippable = whenSkippable;\n};\n\n/**\n * Handle CURRENT_BREAK_CLIP_TIME_CHANGED event\n */\nCastPlayer.prototype.onCurrentBreakClipTimeChanged = function (currentBreakClipTime) {\n  let skip = document.getElementById('skip');\n\n  // Unskippable\n  if (castPlayer.whenSkippable == undefined || castPlayer.whenSkippable < 0) {\n    // Hide skip button    \n    if (skip && skip.style && skip.style.display)\n      skip.style.display = 'none';\n  }\n  // Skippable\n  else if (castPlayer.whenSkippable !== undefined || currentBreakClipTime >= castPlayer.whenSkippable) {\n    // Show skip button    \n    if (skip && skip.style && skip.style.display)\n      skip.style.display = 'block';\n  }\n  // Not ready to be skipped\n  else {\n    // Hide skip button\n    if (skip && skip.style && skip.style.display)\n      skip.style.display = 'none';\n  }\n};\n\n/**\n * Skip the current Ad\n */\nCastPlayer.prototype.skipAd = function () {\n  castPlayer.remotePlayerController.skipAd();\n}\n\n/**\n * Enable/disable progress bar\n */\nCastPlayer.prototype.enableProgressBar = function (enable) {\n  let progress = document.getElementById('progress');\n  let progress_indicator = document.getElementById('progress_indicator');\n  let seekable_window = document.getElementById('seekable_window');\n\n  if (enable) {\n    // Enable UI\n    progress.style.backgroundImage = \"url('./assets/imagefiles/timeline_bg_progress.png')\";\n    progress.style.cursor = \"pointer\";\n    seekable_window.style.cursor = \"pointer\";\n    progress_indicator.style.cursor = \"pointer\";\n    progress_indicator.draggable = true;\n\n    // Add listeners\n    progress.addEventListener('click', castPlayer.seekMediaListener);\n    seekable_window.addEventListener('click', castPlayer.seekMediaListener);\n    progress_indicator.addEventListener('dragend', castPlayer.seekMediaListener);\n  } else {\n    // Disable UI\n    progress.style.backgroundImage = \"url('./assets/imagefiles/timeline_bg_buffer.png')\";\n    progress.style.cursor = \"default\";\n    seekable_window.style.cursor = \"default\";\n    progress_indicator.style.cursor = \"default\";\n    progress_indicator.draggable = false;\n\n    // Remove listeners\n    progress.removeEventListener('click', castPlayer.seekMediaListener);\n    seekable_window.removeEventListener('click', castPlayer.seekMediaListener);\n    progress_indicator.removeEventListener('dragend', castPlayer.seekMediaListener);\n  }\n}\n\n/**\n * Updates media duration text in UI\n */\nCastPlayer.prototype.updateMediaDuration = function() {\n  document.getElementById('duration').innerHTML =\n      CastPlayer.getDurationString(castPlayer.currentMediaDuration);\n};\n\n/**\n * @param {number} durationInSec\n * @return {string}\n */\nCastPlayer.getDurationString = function(durationInSec) {\n  var durationString = '' + Math.floor(durationInSec % 60);\n  var durationInMin = Math.floor(durationInSec / 60);\n  if (durationInMin === 0) {\n      return durationString;\n  }\n  durationString = (durationInMin % 60) + ':' + durationString;\n  var durationInHour = Math.floor(durationInMin / 60);\n  if (durationInHour === 0) {\n      return durationString;\n  }\n  return durationInHour + ':' + durationString;\n};\n\n/**\n * Request full screen mode\n */\nCastPlayer.prototype.requestFullScreen = function () {\n  // Supports most browsers and their versions\n  var element = document.getElementById('video_element');\n  var requestMethod =\n    element['requestFullScreen'] || element['webkitRequestFullScreen'];\n\n  if (requestMethod) {\n    // Native full screen.\n    requestMethod.call(element);\n    console.log('Requested fullscreen');\n  }\n};\n\n/**\n * Exit full screen mode\n */\nCastPlayer.prototype.cancelFullScreen = function () {\n  // Supports most browsers and their versions.\n  var requestMethod =\n    document['cancelFullScreen'] || document['webkitCancelFullScreen'];\n\n  if (requestMethod) {\n    requestMethod.call(document);\n  }\n};\n\n/**\n * Exit fullscreen mode by escape\n */\nCastPlayer.prototype.fullscreenChangeHandler = function () {\n  castPlayer.fullscreen = !castPlayer.fullscreen;\n};\n\n/**\n * Show expand/collapse fullscreen button\n */\nCastPlayer.prototype.showFullscreenButton = function () {\n  let fullscreen_expand = document.getElementById('fullscreen_expand');\n  let fullscreen_collapse = document.getElementById('fullscreen_collapse');\n\n  if (castPlayer.fullscreen) {\n    if (fullscreen_expand && fullscreen_expand.style && fullscreen_expand.style.display)\n      fullscreen_expand.style.display = 'none';\n\n    if (fullscreen_collapse && fullscreen_collapse.style && fullscreen_collapse.style.display)\n      fullscreen_collapse.style.display = 'block';\n  } else {\n    if (fullscreen_expand && fullscreen_expand.style && fullscreen_expand.style.display)\n      fullscreen_expand.style.display = 'block';\n\n    if (fullscreen_collapse && fullscreen_collapse.style && fullscreen_collapse.style.display)\n      fullscreen_collapse.style.display = 'none';\n  }\n};\n\n/**\n * Hide expand/collapse fullscreen button\n */\nCastPlayer.prototype.hideFullscreenButton = function () {\n  let fullscreen_expand = document.getElementById('fullscreen_expand');\n  let fullscreen_collapse = document.getElementById('fullscreen_collapse');\n\n  if (fullscreen_expand && fullscreen_expand.style && fullscreen_expand.style.display)\n    fullscreen_expand.style.display = 'none';\n\n  if (fullscreen_collapse && fullscreen_collapse.style && fullscreen_collapse.style.display)\n    fullscreen_collapse.style.display = 'none';\n};\n\n/**\n * Show the media control\n */\nCastPlayer.prototype.showMediaControl = function () {\n  let media_control = document.getElementById('media_control');\n  if (media_control && media_control.style && media_control.style.opacity)\n    media_control.style.opacity = 0.7;\n};\n\n/**\n * Hide the media control\n */\nCastPlayer.prototype.hideMediaControl = function () {\n  if (typeof cast !== 'undefined') {\n    let context = cast.framework.CastContext.getInstance();\n    if (context && context.getCurrentSession()) {\n      // Do not hide controls during an active cast session.\n      document.getElementById('media_control').style.opacity = 0.7;\n    } else {\n      document.getElementById('media_control').style.opacity = 0;\n    }\n  }\n};\n\n/**\n * Show the volume slider\n */\nCastPlayer.prototype.showVolumeSlider = function () {\n  if (!castPlayer.playerHandler.isMuted()) {\n    document.getElementById('audio_bg').style.opacity = 1;\n    document.getElementById('audio_bg_track').style.opacity = 1;\n    document.getElementById('audio_bg_level').style.opacity = 1;\n    document.getElementById('audio_indicator').style.opacity = 1;\n  }\n};\n\n/**\n * Hide the volume slider\n */\nCastPlayer.prototype.hideVolumeSlider = function () {\n  document.getElementById('audio_bg').style.opacity = 0;\n  document.getElementById('audio_bg_track').style.opacity = 0;\n  document.getElementById('audio_bg_level').style.opacity = 0;\n  document.getElementById('audio_indicator').style.opacity = 0;\n};\n\n/**\n * Reset the volume slider\n */\nCastPlayer.prototype.resetVolumeSlider = function () {\n  var volumeTrackHeight = document.getElementById('audio_bg_track').clientHeight;\n  var defaultVolumeSliderHeight = DEFAULT_VOLUME * volumeTrackHeight;\n  document.getElementById('audio_bg_level').style.height =\n    defaultVolumeSliderHeight + 'px';\n  document.getElementById('audio_on').style.display = 'block';\n  document.getElementById('audio_off').style.display = 'none';\n};\n\n/**\n * Initialize UI components and add event listeners\n */\nCastPlayer.prototype.initializeUI = () => {\n  // Set initial values for title, subtitle, and description\n  document.getElementById('media_title').innerHTML =\n    castPlayer.mediaContents[0]['title'];\n  document.getElementById('media_subtitle').innerHTML =\n    castPlayer.mediaContents[castPlayer.currentMediaIndex]['subtitle'];\n  // document.getElementById('media_desc').innerHTML =\n  //   castPlayer.mediaContents[castPlayer.currentMediaIndex]['description'];\n\n  // Add event handlers to UI components\n  document.getElementById('progress_bg').addEventListener(\n    'click', castPlayer.seekMedia.bind(castPlayer));\n  document.getElementById('progress').addEventListener(\n    'click', castPlayer.seekMedia.bind(castPlayer));\n  document.getElementById('progress_indicator').addEventListener(\n    'dragend', castPlayer.seekMedia.bind(castPlayer));\n  document.getElementById('audio_on').addEventListener(\n    'click', castPlayer.playerHandler.mute.bind(castPlayer.playerHandler));\n  document.getElementById('audio_off').addEventListener(\n    'click', castPlayer.playerHandler.unMute.bind(castPlayer.playerHandler));\n  document.getElementById('audio_bg').addEventListener(\n    'mouseover', castPlayer.showVolumeSlider.bind(castPlayer));\n  document.getElementById('audio_on').addEventListener(\n    'mouseover', castPlayer.showVolumeSlider.bind(castPlayer));\n  document.getElementById('audio_bg_level').addEventListener(\n    'mouseover', castPlayer.showVolumeSlider.bind(castPlayer));\n  document.getElementById('audio_bg_track').addEventListener(\n    'mouseover', castPlayer.showVolumeSlider.bind(castPlayer));\n  document.getElementById('audio_bg_level').addEventListener(\n    'click', castPlayer.setVolume.bind(castPlayer));\n  document.getElementById('audio_bg_track').addEventListener(\n    'click', castPlayer.setVolume.bind(castPlayer));\n  document.getElementById('audio_bg').addEventListener(\n    'mouseout', castPlayer.hideVolumeSlider.bind(castPlayer));\n  document.getElementById('audio_on').addEventListener(\n    'mouseout', castPlayer.hideVolumeSlider.bind(castPlayer));\n  document.getElementById('main_video').addEventListener(\n    'mouseover', castPlayer.showMediaControl.bind(castPlayer));\n  document.getElementById('main_video').addEventListener(\n    'mouseout', castPlayer.hideMediaControl.bind(castPlayer));\n  document.getElementById('media_control').addEventListener(\n    'mouseover', castPlayer.showMediaControl.bind(castPlayer));\n  document.getElementById('media_control').addEventListener(\n    'mouseout', castPlayer.hideMediaControl.bind(castPlayer));\n  \n  const fullscreen_expand = document.getElementById('fullscreen_expand');\n  if (fullscreen_expand){\n    fullscreen_expand.addEventListener(\n    'click', castPlayer.requestFullScreen.bind(castPlayer));\n  }\n\n  const fullscreen_collapse = document.getElementById('fullscreen_collapse');\n  if (fullscreen_collapse) {\n    fullscreen_collapse.addEventListener(\n      'click', castPlayer.cancelFullScreen.bind(castPlayer));\n  }\n\n  document.addEventListener(\n    'fullscreenchange', castPlayer.fullscreenChangeHandler.bind(castPlayer), false);\n  document.addEventListener(\n    'webkitfullscreenchange', castPlayer.fullscreenChangeHandler.bind(castPlayer), false);\n  // Enable play/pause buttons\n  // document.getElementById('play').addEventListener(\n  //   'click', castPlayer.playerHandler.play.bind(castPlayer.playerHandler));\n  // document.getElementById('pause').addEventListener(\n  //   'click', castPlayer.playerHandler.pause.bind(castPlayer.playerHandler));\n  document.getElementById('progress_indicator').draggable = true;\n};\n\n/**\n * Add video thumbnails div's to UI for media JSON contents\n */\nCastPlayer.prototype.addVideoThumbs = function () {\n  if (typeof castPlayer.mediaJSON !== 'undefined' && castPlayer.mediaJSON['categories'] && castPlayer.mediaJSON['categories'].length > 0) {\n    castPlayer.mediaContents = castPlayer.mediaJSON['categories'][0]['videos'];\n    var ni = document.getElementById('carousel');\n    var newdiv = null;\n    var divIdName = null;\n    for (var i = 0; i < castPlayer.mediaContents.length; i++) {\n      newdiv = document.createElement('div');\n      divIdName = 'thumb' + i + 'Div';\n      newdiv.setAttribute('id', divIdName);\n      newdiv.setAttribute('class', 'thumb');\n      newdiv.innerHTML =\n        '<img src=\"' + MEDIA_SOURCE_ROOT + castPlayer.mediaContents[i]['thumb'] +\n        '\" class=\"thumbnail\">';\n      newdiv.addEventListener('click', castPlayer.selectMedia.bind(castPlayer, i));\n      ni.appendChild(newdiv);\n    }\n  }\n};\n\nCastPlayer.prototype.addMediaContents = () => {\n  if (typeof castPlayer.mediaJSON !== 'undefined' && castPlayer.mediaJSON['categories'] && castPlayer.mediaJSON['categories'].length > 0) {\n    castPlayer.mediaContents = castPlayer.mediaJSON['categories'][0]['videos'];\n    return castPlayer.mediaContents;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Makes human-readable message from chrome.cast.Error\n * @param {chrome.cast.Error} error\n * @return {string} error message\n */\nCastPlayer.getErrorMessage = function (error) {\n  switch (error.code) {\n    case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n      return 'The API is not initialized.' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.CANCEL:\n      return 'The operation was canceled by the user' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.CHANNEL_ERROR:\n      return 'A channel to the receiver is not available.' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.EXTENSION_MISSING:\n      return 'The Cast extension is not available.' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.INVALID_PARAMETER:\n      return 'The parameters to the operation were not valid.' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n      return 'No receiver was compatible with the session request.' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.SESSION_ERROR:\n      return 'A session could not be created, or a session was invalid.' +\n        (error.description ? ' :' + error.description : '');\n    case chrome.cast.ErrorCode.TIMEOUT:\n      return 'The operation timed out.' +\n        (error.description ? ' :' + error.description : '');\n    default:\n      return error;\n  }\n};\n\nvar castPlayer = new CastPlayer();\nwindow['__onGCastApiAvailable'] = function (isAvailable) {\n  if (isAvailable) {\n    castPlayer.initializeCastPlayer();\n  }\n};\n\nwindow.CastPlayer = castPlayer;\n"]}