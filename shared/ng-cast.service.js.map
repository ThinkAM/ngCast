{"version":3,"file":"ng-cast.service.js","sourceRoot":"","sources":["ng-cast.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nlet window: any;\nlet cast: any;\nlet chrome: any;\n\n@Injectable()\nexport class NgCastService {\n  private cast: any;\n  private session: any;\n  private currentMedia: any;\n  public status = {\n    casting: false\n  };\n\n  constructor() {}\n\n  initializeCastApi() {\n    this.cast = window['chrome'].cast;\n    let sessionRequest = new this.cast.SessionRequest(this.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID);\n    let apiConfig = new this.cast.ApiConfig(sessionRequest,\n      () => { },\n      (status: any) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } }\n    );\n    let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);\n  };\n\n  onGCastApiAvailable(url: string, type: string): void {\n    window.__onGCastApiAvailable = function(isAvailable: boolean){\n      if(!isAvailable){\n          return false;\n      }\n  \n      var castContext = cast.framework.CastContext.getInstance();\n  \n      castContext.setOptions({\n          autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n          receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID\n      });\n  \n      var stateChanged = cast.framework.CastContextEventType.CAST_STATE_CHANGED;\n      castContext.addEventListener(stateChanged, () => {\n          var castSession = castContext.getCurrentSession();\n          var media = new chrome.cast.media.MediaInfo(url, type);\n          var request = new chrome.cast.media.LoadRequest(media);\n  \n          castSession && castSession\n              .loadMedia(request)\n              .then(() => {\n                  console.log('Success');\n              })\n              .catch((error: any) => {\n                  console.log('Error: ' + error);\n              });\n      });\n    };\n  }\n\n  onInitSuccess = function () {\n    console.log('GCast initialization success');\n  };\n\n  onError = function (err: any) {\n    console.log('GCast initialization failed', err);\n  };\n\n  discoverDevices = () => {\n    let self: any = this;\n    let subj = new Subject();\n    this.cast.requestSession((s: any) => {\n      self.session = s;\n      self.setCasting(true);\n      subj.next('CONNECTED');\n    }, function (err: any) {\n      self.setCasting(false);\n      if (err.code === 'cancel') {\n        self.session = undefined;\n        subj.next('CANCEL');\n      } else {\n        console.error('Error selecting a cast device', err);\n      }\n    });\n    return subj;\n  };\n\n  launchMedia = (media: any) =>  {\n    let mediaInfo = new this.cast.media.MediaInfo(media);\n    let request = new this.cast.media.LoadRequest(mediaInfo);\n    console.log('launch media with session', this.session);\n\n    if (!this.session) {\n      window.open(media);\n      return false;\n    }\n    this.session.loadMedia(request, this.onMediaDiscovered.bind(this, 'loadMedia'), this.onMediaError);\n    return true;\n  };\n\n  onMediaDiscovered = (media: any) => {\n    this.currentMedia = media;\n  };\n\n  play = () => {\n    this.currentMedia.play(null);\n  };\n\n  pause = () => {\n    this.currentMedia.pause(null);\n  };\n\n  stop = () => {\n    this.currentMedia.stop(null);\n  };\n\n  onMediaError = (err: any) => {\n    console.error('Error launching media', err);\n  };\n\n  setCasting(value: any) {\n    this.status.casting = value;\n  }\n\n  getStatus() {\n    return this.status\n  }\n}\n"]}